<?altova_samplexml i:\eqf\reptest.f00\rpt.xml?>
<!--
    Copyright (c) 1999-2011, International Business Machines
    Corporation and others.  All rights reserved.
-->

<!-- &nbsp; does not exists in XPath, so defined as the real unicode character 160
     which is the non breaking space character and provides exactly the same result than using &nbsp; -->
<!DOCTYPE xsl:stylesheet [
	<!ENTITY nbsp "&#160;">
]>
<!-- HISTHTML.XSL

	Author: Gerhard Queck

	Purpose: Convert XML history report to HTML
 -->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output method="html" encoding="utf-8"/>
	<xsl:template match="/">
		<html>
			<!-- <head> required to put <META http-equiv="Content-Type" content="text/html; charset=utf-8">
     generated by output encoding attribute -->
			<head/>
			<body>
				<xsl:call-template name="reportheader"/>
				<xsl:choose>
					<xsl:when test="/tmhistory/description/report/@layout = 'Detail'">
						<xsl:call-template name="detailedhistory"/>
					</xsl:when>
					<xsl:when test="/tmhistory/description/report/@layout = 'Versionl'">
						<xsl:call-template name="detailedhistory"/>
					</xsl:when>
					<xsl:when test="/tmhistory/description/report/@layout = 'BriefSortByDocument'">
						<xsl:call-template name="summary"/>
					</xsl:when>
					<xsl:when test="/tmhistory/description/report/@layout = 'BriefSortByDate'">
						<xsl:call-template name="summary"/>
					</xsl:when>
				</xsl:choose>
			    <xsl:if test="/tmhistory/description/report/@withDocumentList='Yes'">
			      <xsl:call-template name="documentlist"/>
			    </xsl:if>
			</body>
		</html>
	</xsl:template>
	
	<!-- create report header -->
	<xsl:template name="reportheader">
		<h2>History Report - <xsl:value-of select="/tmhistory/description/report/@layout"/>
			<br/>OpenTM2 : <xsl:value-of select="/tmhistory/description/translationManager/@version"/>
			<xsl:text>.</xsl:text>
			<xsl:value-of select="/tmhistory/description/translationManager/@release"/>
		    <xsl:text>&nbsp;Build </xsl:text><xsl:value-of select="/tmhistory/description/translationManager/@build"/>
			<br/>Calculation Profile  : <xsl:value-of select="/tmhistory/description/profile/@name"/>
			<br/>Report generated at  :  <xsl:value-of select="/tmhistory/description/report/@generatedDate"/> 
				 &nbsp;
				 <xsl:value-of select="/tmhistory/description/report/@generatedTime"/>
			<br/>Folder : <xsl:value-of select="/tmhistory/description/folder/@nameLong"/>
			<br/>Documents in folder  :   <xsl:value-of select="/tmhistory/description/folder/@documentsAmount"/>
			<br/>Documents selected  :   <xsl:value-of select="/tmhistory/description/report/@documentsSelected"/>
			<br/>
		</h2>
	</xsl:template>

	<!-- create summarized history -->
	<xsl:template name="summary">
		<TABLE BORDER="1">
			<tr bgcolor="#d3d3d3">
				<td><b>Task Num</b></td>
				<td><b>Document</b></td>
				<td><b>Date Time</b></td>
				<td><b>Processed Task</b></td>
			</tr>
			<xsl:for-each select="/tmhistory/summary/histlogRecord">
				<tr>
					<td><xsl:value-of select="./header/@num"/></td>
					<td><xsl:value-of select="./header/@nameLong"/></td>
					<td><xsl:value-of select="./header/@time"/></td>
					<td><xsl:value-of select="./header/@task"/></td>
				</tr>
			</xsl:for-each>
		</TABLE>
	</xsl:template>
	
	
	<!-- create detailed history -->
	<xsl:template name="detailedhistory">
		<xsl:for-each select="/tmhistory/histlogRecord">
			<xsl:call-template name="histlogrecord">
				<xsl:with-param name="header" select="./header"/>
				<xsl:with-param name="data" select="./data"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template>
	
	
	<!-- display a single history log record -->
	<xsl:template name="histlogrecord">
		<xsl:param name="header"/>
		<xsl:param name="data"/>
		<BR/>
		<BR/>
		<TABLE BORDER="1">
			<tr>
				<td>
					<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
						<tr>
							<td width="130"/>
							<td width="200"/>
						</tr>
						<tr>
							<td><b>Record  <xsl:value-of select="$header/@num"/></b></td>
							<td><b><xsl:value-of select="$header/@task"/></b></td>
						</tr>
						<tr>
							<td><b>Date</b></td>
							<td><b><xsl:value-of select="$header/@time"/></b></td>
						</tr>
						<tr>
							<td><b>Document</b></td>
							<td><b><xsl:value-of select="$header/@name"/></b></td>
						</tr>
						<xsl:if test="$header/@path !='' ">
							<tr>
								<td><b>Document path</b></td>
								<td><b><xsl:value-of select="$header/@path"/></b></td>
							</tr>
						</xsl:if>
						<tr>
							<td>&nbsp;</td>
						</tr>
						<xsl:choose>
							<xsl:when test="$data/@type = 'DocImport'">
								<xsl:call-template name="import">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'Analysis'">
								<xsl:call-template name="analysis">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'AutomaticSubst3'">
								<xsl:call-template name="autosubst">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'AutomaticSubst'">
								<xsl:call-template name="autosubst">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocExport'">
								<xsl:call-template name="docexport">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocSave3'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocSave'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocSave2'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocImpNewTarget'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocImpNewTarget2'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocImpNewTarget3'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocApi'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocApi3'">
								<xsl:call-template name="docsave">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'DocProp'">
								<xsl:call-template name="docprop">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'Version'">
								<xsl:call-template name="version">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'FolProp'">
								<xsl:call-template name="folprop">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'FolPropShipment'">
								<xsl:call-template name="folpropshipment">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:when test="$data/@type = 'Version'">
								<xsl:call-template name="version">
									<xsl:with-param name="data" select="$data"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:otherwise/>
						</xsl:choose>
					</TABLE>
				</td>
			</tr>
		</TABLE>
	</xsl:template>
	
	<!-- display history data of doc prop record -->
	<xsl:template name="docprop">
		<xsl:param name="data"/>
		<tr>
			<td width="130"/>
			<td width="200"/>
		</tr>
		<xsl:if test="$data/markup != '' ">
			<tr>
				<td><b>Markup</b></td>
				<td><b><xsl:value-of select="$data/markup"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/memory != '' ">
			<tr>
				<td><b>Memory</b></td>
				<td><b><xsl:value-of select="$data/memory"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/sourceLang != '' ">
			<tr>
				<td><b>Source language</b></td>
				<td><b><xsl:value-of select="$data/sourceLang"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/targetLang != '' ">
			<tr>
				<td><b>Target language</b></td>
				<td><b><xsl:value-of select="$data/targetLang"/></b></td>
			</tr>
		</xsl:if>
	</xsl:template>
	
	<!-- display history data of version record -->
	<xsl:template name="version">
		<xsl:param name="data"/>
		<tr>
			<td width="130"/>
			<td width="200"/>
		</tr>
		<tr>
			<td><b>Platform</b></td>
			<td><b><xsl:value-of select="$data/@platform"/></b></td>
		</tr>
		<tr>
			<td><b>Product date</b></td>
			<td><b><xsl:value-of select="$data/@productDate"/></b></td>
		</tr>
		<tr>
			<td><b>Version</b></td>
			<td><b><xsl:value-of select="$data/@version"/></b></td>
		</tr>
	</xsl:template>
	
	<!-- display history data of folprop record -->
	<xsl:template name="folprop">
		<xsl:param name="data"/>
		<tr>
			<td width="130"/>
			<td width="200"/>
		</tr>
		<xsl:if test="$data/description != '' ">
			<tr>
				<td><b>Description</b></td>
				<td><b><xsl:value-of select="$data/description"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/editor != '' ">
			<tr>
				<td><b>Editor</b></td>
				<td><b><xsl:value-of select="$data/editor"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/markup != '' ">
			<tr>
				<td><b>Markup</b></td>
				<td><b><xsl:value-of select="$data/markup"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/sourceLang != '' ">
			<tr>
				<td><b>Source language</b></td>
				<td><b><xsl:value-of select="$data/sourceLang"/></b></td>
			</tr>
		</xsl:if>
		<xsl:if test="$data/targetLang != '' ">
			<tr>
				<td><b>Target language</b></td>
				<td><b><xsl:value-of select="$data/targetLang"/></b></td>
			</tr>
		</xsl:if>
	</xsl:template>
	
	<!-- display history data of folder shipment record -->
	<xsl:template name="folpropshipment">
		<xsl:param name="data"/>
		<tr>
			<td width="130"/>
			<td width="200"/>
		</tr>
		<tr>
			<td><b>Shipment</b></td>
			<td><b><xsl:value-of select="$data/shipment"/></b></td>
		</tr>
	</xsl:template>
	
	
	
	<!-- display history data of import record -->
	<xsl:template name="import">
		<xsl:param name="data"/>
		<tr>
			<td width="130"/>
			<td width="200"/>
		</tr>
		<tr>
			<td><b>Format</b></td>
			<td><b><xsl:value-of select="$data/importType"/></b></td>
		</tr>
		<tr>
			<td><b>Import path</b></td>
			<td><b><xsl:value-of select="$data/path"/></b></td>
		</tr>
		<tr>
			<td><b>Document</b></td>
			<td><b><xsl:value-of select="$data/document"/></b></td>
		</tr>
		<tr>
			<td><b>Shipment Number</b></td>
			<td><b><xsl:value-of select="$data/shipment"/></b></td>
		</tr>
		<tr>
			<td><b>Source replaced</b></td>
			<td><b><xsl:value-of select="$data/sourcereplaced"/></b></td>
		</tr>
		<tr>
			<td><b>Target replaced</b></td>
			<td><b><xsl:value-of select="$data/targetreplaced"/></b></td>
		</tr>
	</xsl:template>
	
	
	<!-- display history data of analysis record -->
	<xsl:template name="analysis">
		<xsl:param name="data"/>
		<tr>
			<td width="130"/>
			<td width="200"/>
		</tr>
		<tr>
			<td><b> Substitute exact matches</b></td>
			<td><b><xsl:value-of select="$data/options/@autoReplace"/></b></td>
		</tr>
		<tr>
			<td><b>Use latest exact match</b></td>
			<td><b><xsl:value-of select="$data/options/@useLatestMatch"/></b></td>
		</tr>
		<tr>
			<td><b>Use joined segments</b></td>
			<td><b><xsl:value-of select="$data/options/@autoJoin"/></b></td>
		</tr>
		<tr>
			<td><b>Add to memory</b></td>
			<td><b><xsl:value-of select="$data/options/@addToMem"/></b></td>
		</tr>
		<tr>
			<td><b>Translation memory</b></td>
			<td><b><xsl:value-of select="$data/memory"/></b></td>
		</tr>
		<tr>
			<td><b>Markup</b></td>
			<td><b><xsl:value-of select="$data/markup"/></b></td>
		</tr>
	</xsl:template>
	
	
	<!-- display history data of substitution record -->
	<xsl:template name="autosubst">
		<xsl:param name="data"/>
			<tr>
				<td width="200"/>
				<td width="200"/>
			</tr>
			<xsl:call-template name="fuzzylevel">
				<xsl:with-param name="level" select="$data/fuzzyLevel"/>
			</xsl:call-template>
			<xsl:call-template name="counttableheader"/>
			<xsl:for-each select="$data/wordcount">
				<xsl:call-template name="wordcount">
					<xsl:with-param name="counts" select="."/>
				</xsl:call-template>
			</xsl:for-each>
	</xsl:template>
	
	<!-- display doc save record -->
	<xsl:template name="docsave">
		<xsl:param name="data"/>
			<tr>
				<td width="200"/>
				<td width="200"/>
			</tr>
			<xsl:call-template name="fuzzylevel">
				<xsl:with-param name="level" select="$data/fuzzyLevel"/>
			</xsl:call-template>
			<xsl:call-template name="counttableheader"/>
			<xsl:for-each select="$data/wordcount">
				<xsl:call-template name="wordcount">
					<xsl:with-param name="counts" select="."/>
				</xsl:call-template>
			</xsl:for-each>
	</xsl:template>
	
	<!-- display history data of document export -->
	<xsl:template name="docexport">
		<xsl:param name="data"/>
			<tr>
				<td width="200"/>
				<td width="200"/>
			</tr>
			<tr>
				<td><b>Format</b></td>
				<td><b><xsl:value-of select="$data/exportType"/></b></td>
			</tr>
			<xsl:if test="$data/exportType != 'Folder' ">
				<tr>
					<td><b>Source exported</b></td>
					<td><b><xsl:value-of select="$data/sourceExported"/></b></td>
				</tr>
				<tr>
					<td><b>Target exported</b></td>
					<td><b><xsl:value-of select="$data/targetExported"/></b></td>
				</tr>
				<tr>
					<td><b>With revision marks</b></td>
					<td><b><xsl:value-of select="$data/revisionMarks"/></b></td>
				</tr>
				<tr>
					<td><b>SNOMATCH file exported</b></td>
					<td><b><xsl:value-of select="$data/snoMatch"/></b></td>
				</tr>
				<tr>
					<td><b>Source path</b></td>
					<td><b><xsl:value-of select="$data/sourcePath"/></b></td>
				</tr>
				<tr>
					<td><b>Target path</b></td>
					<td><b><xsl:value-of select="$data/targetExported"/></b></td>
				</tr>
			</xsl:if>
	</xsl:template>

	<!-- show fuzzy levels -->
	<xsl:template name="fuzzylevel">
		<xsl:param name="level"/>
		<xsl:if test="$level/@small !='' ">
			<tr>
				<td><b>Fuzzyness level for segments with 1..4 words&nbsp;&nbsp;</b></td>
				<td><b><xsl:value-of select="$level/@small"/>&nbsp;%</b></td>
			</tr>
			<tr>
				<td><b>Fuzzyness level for segments with 5..14 words&nbsp;&nbsp;</b></td>
				<td><b><xsl:value-of select="$level/@medium"/>&nbsp;%</b></td>
			</tr>
			<tr>
				<td><b>Fuzzyness level for segments with 15 and more words&nbsp;&nbsp;</b></td>
				<td><b><xsl:value-of select="$level/@large"/>&nbsp;%</b></td>
			</tr>
		</xsl:if>
	</xsl:template>
	
	
	<!-- setup count table header -->
	<xsl:template name="counttableheader">
		<tr align="center" bgcolor="D6D6D6">
			<td colspan="1"><b>&nbsp;</b></td>
			<td colspan="1"><b>&nbsp;</b></td>
			<td colspan="1"><b>&nbsp;&nbsp;Segments</b></td>
			<td colspan="1"><b>&nbsp;&nbsp;Source</b></td>
			<td colspan="1"><b>&nbsp;&nbsp;Modified</b></td>
			<td colspan="1"><b>&nbsp;&nbsp;Target</b></td>
		</tr>
		<tr align="center" bgcolor="D6D6D6">
			<td><b>&nbsp;</b></td>
			<td><b>&nbsp;</b></td>
			<td><b>&nbsp;</b></td>
			<td><b>Words</b></td>
			<td><b>Words</b></td>
			<td><b>Words</b></td>
		</tr>
	</xsl:template>
	
	
	<!-- show counts of a single wordcount -->
	<xsl:template name="wordcount">
		<xsl:param name="counts"/>
			<xsl:if test="$counts/@empty = 'No' ">
				<tr align="right" bgcolor="white">
				<td rowspan="3">
					<b>
						<xsl:choose>
							<xsl:when test="$counts/@type = 'analysisAutosubst'">Analysis<br/>Autosubst</xsl:when>
							<xsl:when test="$counts/@type = 'editAutosubst'">Edit<br/>Autosubst</xsl:when>
							<xsl:when test="$counts/@type = 'exact'">Exact<br/>Matches</xsl:when>
							<xsl:when test="$counts/@type = 'replace'">Replace<br/>Matches</xsl:when>
							<xsl:when test="$counts/@type = 'fuzzy'">Fuzzy<br/>Matches</xsl:when>
							<xsl:when test="$counts/@type = 'machine'">Machine<br/>Matches</xsl:when>
							<xsl:when test="$counts/@type = 'nomatch'">None<br/>Matches</xsl:when>
							<xsl:when test="$counts/@type = 'notTranslated'">Not<br/>Translated</xsl:when>
							<xsl:otherwise></xsl:otherwise>
						</xsl:choose>
					</b>
					</td>
					<td><b>1..4</b></td>
					<td><b><xsl:value-of select="$counts/words[@category='simple' and @type='segments']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='simple' and @type='sourceWords']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='simple' and @type='modWords']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='simple' and @type='targetWords']/@count" /></b></td>
				</tr>
				<tr align="right" bgcolor="white">
					<td><b>5..14</b></td>
					<td><b><xsl:value-of select="$counts/words[@category='medium' and @type='segments']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='medium' and @type='sourceWords']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='medium' and @type='modWords']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='medium' and @type='targetWords']/@count" /></b></td>
				</tr>
				<tr align="right" bgcolor="white">
					<td><b> >=15</b></td>
					<td><b><xsl:value-of select="$counts/words[@category='complex' and @type='segments']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='complex' and @type='sourceWords']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='complex' and @type='modWords']/@count" /></b></td>
					<td><b><xsl:value-of select="$counts/words[@category='complex' and @type='targetWords']/@count" /></b></td>
				</tr>
			</xsl:if>
	</xsl:template>
	
<xsl:template name = "documentlist" >
	<P><BR/></P>
	<TABLE border="1">
	   <TBODY>
		  <TR>
			 <TD bgcolor="#d3d3d3">Report:</TD>
			 <TD bgcolor="#f7f7f7">Document List</TD>
		  </TR>
	   </TBODY>
	</TABLE>
	<TABLE border="1">
	   <TBODY>
     	  <xsl:for-each select="/tmhistory/documentList/document">
			  <TR><td>
				<TABLE border="0" cellspacing="3">
				   <TBODY>
					<TR>
					   <TD>&nbsp;</TD>
					   <TD><xsl:value-of select="./@num"/>&nbsp;</TD>
					</TR>
					<xsl:if test="./path!=''">
						<TR>
						   <TD>Path: </TD>
						   <TD><xsl:value-of select="./path"/>&nbsp;</TD>
						</TR>
					</xsl:if>
					<TR>
					   <TD>Name: </TD>
					   <TD><xsl:value-of select="./name"/>&nbsp;</TD>
					</TR>
				   </TBODY>
				</TABLE>
			  </td></TR>
	      </xsl:for-each>
	   </TBODY>
	</TABLE>
</xsl:template>
	

	
</xsl:stylesheet>
